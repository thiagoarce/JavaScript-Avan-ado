{"version":3,"sources":["../../app-es6/services/ConnectionFactory.js"],"names":["ConnectionFactory","stores","dbversion","dbName","connection","close","Error","Promise","resolve","reject","openRequest","window","indexedDB","open","onupgradeneeded","_createStores","e","target","result","onsuccess","bind","onerror","console","log","error","name","forEach","objectStoreNames","contains","store","deleteObjectStore","createObjectStore","autoIncrement"],"mappings":";;;;;;AAAA,IAAIA,oBAAqB,YAAY;AACjC,QAAMC,SAAS,CAAC,aAAD,CAAf;AACA,QAAMC,YAAY,CAAlB;AACA,QAAMC,SAAS,YAAf;;AAEA,QAAIC,aAAa,IAAjB;AACA,QAAIC,QAAQ,IAAZ;;AAEA;AAEI,qCAAc;AAAA;;AAEV,kBAAM,IAAIC,KAAJ,CAAU,sDAAV,CAAN;AACH;;AALL;AAAA;AAAA,4CAO2B;;AAEnB,uBAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;;AAEpC,wBAAIC,cAAcC,OAAOC,SAAP,CAAiBC,IAAjB,CAAsBV,MAAtB,EAA8BD,SAA9B,CAAlB;;AAEAQ,gCAAYI,eAAZ,GAA8B,aAAK;;AAE/Bd,0CAAkBe,aAAlB,CAAgCC,EAAEC,MAAF,CAASC,MAAzC;AAEH,qBAJD;;AAMAR,gCAAYS,SAAZ,GAAwB,aAAK;;AAEzB,4BAAI,CAACf,UAAL,EAAiB;AACbA,yCAAaY,EAAEC,MAAF,CAASC,MAAtB;AACA;AACAb,oCAAQD,WAAWC,KAAX,CAAiBe,IAAjB,CAAsBhB,UAAtB,CAAR;AACAA,uCAAWC,KAAX,GAAmB,YAAU;AACzB,sCAAM,IAAIC,KAAJ,CAAU,4CAAV,CAAN;AACH,6BAFD;AAGH;AACDE,gCAAQJ,UAAR;AAEH,qBAZD;;AAcAM,gCAAYW,OAAZ,GAAsB,aAAK;AACvBC,gCAAQC,GAAR,CAAYP,EAAEC,MAAF,CAASO,KAArB;;AAEAf,+BAAOO,EAAEC,MAAF,CAASO,KAAT,CAAeC,IAAtB;AACH,qBAJD;AAMH,iBA9BM,CAAP;AA+BH;AAxCL;AAAA;AAAA,0CA0CyBrB,UA1CzB,EA0CqC;;AAE7BH,uBAAOyB,OAAP,CAAe,iBAAS;AACpB,wBAAItB,WAAWuB,gBAAX,CAA4BC,QAA5B,CAAqCC,KAArC,CAAJ,EACIzB,WAAW0B,iBAAX,CAA6BD,KAA7B;;AAEJzB,+BAAW2B,iBAAX,CAA6BF,KAA7B,EAAoC,EAAEG,eAAe,IAAjB,EAApC;AACH,iBALD;AAMH;AAlDL;AAAA;AAAA,8CAoD4B;AACpB,oBAAG5B,UAAH,EAAc;AACVC;AACAD,iCAAa,IAAb;AACH;AACJ;AAzDL;;AAAA;AAAA;AA2DH,CAnEuB,EAAxB","file":"ConnectionFactory.js","sourcesContent":["var ConnectionFactory = (function () {\r\n    const stores = ['negociacoes'];\r\n    const dbversion = 5;\r\n    const dbName = 'aluraframe'\r\n\r\n    var connection = null;\r\n    var close = null;\r\n\r\n    return class ConnectionFactory {\r\n\r\n        constructor() {\r\n\r\n            throw new Error('Não é possível criar instâncias de ConnectionFactory')\r\n        }\r\n\r\n        static getConnection() {\r\n\r\n            return new Promise((resolve, reject) => {\r\n\r\n                let openRequest = window.indexedDB.open(dbName, dbversion);\r\n\r\n                openRequest.onupgradeneeded = e => {\r\n\r\n                    ConnectionFactory._createStores(e.target.result);\r\n\r\n                };\r\n\r\n                openRequest.onsuccess = e => {\r\n\r\n                    if (!connection) {\r\n                        connection = e.target.result;\r\n                        //Monkey Patch\r\n                        close = connection.close.bind(connection);\r\n                        connection.close = function(){\r\n                            throw new Error('Você não pode fechar diretamente a conexão')\r\n                        }\r\n                    }\r\n                    resolve(connection);\r\n\r\n                };\r\n\r\n                openRequest.onerror = e => {\r\n                    console.log(e.target.error);\r\n\r\n                    reject(e.target.error.name);\r\n                }\r\n\r\n            });\r\n        }\r\n\r\n        static _createStores(connection) {\r\n\r\n            stores.forEach(store => {\r\n                if (connection.objectStoreNames.contains(store))\r\n                    connection.deleteObjectStore(store);\r\n\r\n                connection.createObjectStore(store, { autoIncrement: true });\r\n            });\r\n        }\r\n\r\n        static closeConnection(){\r\n            if(connection){\r\n                close();\r\n                connection = null;\r\n            }\r\n        }\r\n    }\r\n})();"]}